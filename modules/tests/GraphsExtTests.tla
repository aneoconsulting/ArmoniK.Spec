---------------------------- MODULE GraphsExtTests -----------------------------
EXTENDS GraphsExt, TLCExt, FiniteSets, TLC

(******************************************************************************)
(* Initialization                                                             *)
(******************************************************************************)
ASSUME LET T == INSTANCE TLC IN T!PrintT("GraphsExtTests")

(******************************************************************************)
(* GraphUnion Tests                                                           *)
(******************************************************************************)
ASSUME LET G == [node |-> {1, 2}, edge |-> {<<1, 2>>}]
           H == [node |-> {2, 3}, edge |-> {<<2, 3>>}]
       IN AssertEq(GraphUnion(G, H), 
                    [node |-> {1, 2, 3}, edge |-> {<<1, 2>>, <<2, 3>>}])

(******************************************************************************)
(* IsDag Tests                                                                *)
(******************************************************************************)
ASSUME \A g \in Graphs({1, 2, 3}): IsDag(g) \in BOOLEAN

ASSUME AssertEq(IsDag([node |-> {1, 2, 3, 4},
                       edge |-> {<<1, 2>>, <<1, 3>>, <<2, 4>>, <<3, 4>>}]), TRUE)

ASSUME AssertEq(IsDag([node |-> {1}, 
                       edge |-> {<<1, 1>>}]), FALSE)

ASSUME AssertEq(IsDag([node |-> {1, 2}, 
                       edge |-> {<<1, 2>>, <<2, 1>>}]), FALSE)

ASSUME AssertEq(IsDag([node |-> {1, 2, 3}, 
                       edge |-> {<<1, 2>>, <<2, 3>>, <<3, 1>>}]), FALSE)

ASSUME AssertEq(IsDag(EmptyGraph), TRUE)

(******************************************************************************)
(* Successors Tests                                                           *)
(******************************************************************************)
ASSUME LET G == [node |-> {1, 2, 3}, edge |-> {<<1, 2>>, <<1, 3>>}]
       IN AssertEq(Successors(1, G), {2, 3})

ASSUME LET G == [node |-> {1, 2, 3}, edge |-> {<<1, 2>>, <<1, 3>>}]
       IN AssertEq(Successors(2, G), {})

(******************************************************************************)
(* AllSuccessors Tests                                                           *)
(******************************************************************************)
ASSUME LET G == [node |-> {1, 2, 3}, edge |-> {<<1, 2>>, <<1, 3>>}]
       IN AssertEq(AllSuccessors({1, 2}, G), {2, 3})

ASSUME LET G == [node |-> {1, 2, 3}, edge |-> {<<1, 2>>, <<1, 3>>}]
       IN AssertEq(AllSuccessors({2}, G), {})

(******************************************************************************)
(* Predecessors Tests                                                         *)
(******************************************************************************)
ASSUME LET G == [node |-> {1, 2, 3}, edge |-> {<<2, 1>>, <<3, 1>>}]
       IN AssertEq(Predecessors(1, G), {2, 3})

ASSUME LET G == [node |-> {1, 2, 3}, edge |-> {<<2, 1>>, <<3, 1>>}]
       IN AssertEq(Predecessors(2, G), {})

(******************************************************************************)
(* AllPredecessors Tests                                                         *)
(******************************************************************************)
ASSUME LET G == [node |-> {1, 2, 3}, edge |-> {<<2, 1>>, <<3, 1>>}]
       IN AssertEq(AllPredecessors({1, 2}, G), {2, 3})

ASSUME LET G == [node |-> {1, 2, 3}, edge |-> {<<2, 1>>, <<3, 1>>}]
       IN AssertEq(AllPredecessors({2}, G), {})

G == [node |-> {1, 2, 3, 4},
      edge |-> {<<1, 2>>, <<1, 3>>, <<2, 4>>, <<3, 4>>}]
ASSUME AssertEq(kLayerAncestors(4, G, 1), {2, 3})
ASSUME AssertEq(kLayerAncestors(4, G, 2), {1})
ASSUME AssertEq(kLayerAncestors(4, G, 3), {})

(******************************************************************************)
(* Roots Tests                                                                *)
(******************************************************************************)
ASSUME AssertEq(Roots([node |-> {1, 2, 3}, edge |-> {<<2, 1>>, <<3, 1>>}]), {2, 3})

ASSUME AssertEq(Roots([node |-> {1, 2, 3}, edge |-> {<<1, 2>>, <<1, 3>>}]), {1})

ASSUME AssertEq(Roots([node |-> {1, 2}, edge |-> {<<1, 2>>, <<2, 1>>}]), {})

(******************************************************************************)
(* Leaves Tests                                                               *)
(******************************************************************************)
ASSUME AssertEq(Leaves([node |-> {1, 2, 3}, edge |-> {<<2, 1>>, <<3, 1>>}]), {1})

ASSUME AssertEq(Leaves([node |-> {1, 2, 3}, edge |-> {<<1, 2>>, <<1, 3>>}]), {2, 3})

ASSUME AssertEq(Leaves([node |-> {1, 2}, edge |-> {<<1, 2>>, <<2, 1>>}]), {})

(******************************************************************************)
\* ACGraphs Tests                                                             *)
(******************************************************************************)
ASSUME AssertEq(ACGraphs({"t"}, {"o", "p"}), {
        [node |-> {}, edge |-> {}],
        [node |-> {"t", "o", "p"}, edge |-> {<<"o", "t">>, <<"t", "p">>}],
        [node |-> {"t", "o", "p"}, edge |-> {<<"p", "t">>, <<"t", "o">>}]
    })

ASSUME AssertEq(Cardinality(ACGraphs({"t", "u"}, {"o", "p", "q"})), 55)

ASSUME AssertEq(Cardinality(ACGraphs({"t", "u", "v"}, {"o", "p", "q"})), 127)

================================================================================